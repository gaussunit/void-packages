--- src/tester.c.orig	2017-07-05 15:07:17.147160104 +0200
+++ src/tester.c	2017-07-05 15:10:56.988168482 +0200
@@ -59,6 +59,8 @@
 #ifdef __linux
 /*for monitoring total space allocated via malloc*/
 #include <malloc.h>
+#include <sys/time.h>
+#include <sys/resource.h>
 #endif
 
 #ifndef F_OK
@@ -309,12 +311,15 @@
 	 * mallinfo() itself is the less worse solution. Allocated bytes are returned as 'int' so limited to 2GB
 	 */
 	if (max_vm_kb) {
-		struct mallinfo minfo = mallinfo();
-		if ((size_t)minfo.uordblks > max_vm_kb * 1024) {
+		struct rusage usage;
+
+		getrusage(RUSAGE_SELF, &usage);
+
+		if ((unsigned)usage.ru_maxrss > max_vm_kb * 1024) {
 			bc_tester_printf(
 				bc_printf_verbosity_error,
 				"The program exceeded the maximum amount of memory allocatable (%i bytes), aborting now.\n",
-				minfo.uordblks);
+				usage.ru_maxrss);
 			abort();
 		}
 	}
@@ -397,10 +402,6 @@
 			}
 		}
 	}
-#ifdef __linux
-	bc_tester_printf(bc_printf_verbosity_info, "Still %i kilobytes allocated when all tests are finished.",
-					 mallinfo().uordblks / 1024);
-#endif
 
 	return CU_get_number_of_tests_failed()!=0;
 
